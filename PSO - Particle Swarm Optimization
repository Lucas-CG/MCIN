import numpy as np
from optproblems import cec2005
import random
import math
import xlwt
from xlwt import Workbook

function1 = cec2005.F1(10)

def Func_obj1(X):
    z = []
    for cromo in X:
        
        z.append(function1(cromo))
    
    return z


def Movement(X_pop, X_func, speeds, pbests, C0, C1, C2, V_max, w):

    #X_pop = X_pop
    #X_func = X_func
    #speeds = speeds
    #pbests = pbests

    new_speeds = []
    new_bests = []

    for index1 in range(len(X_pop)):

        speed_vector = []

        new_pos = []

        speed_i = speeds[index1]
        #print("The current speed for cromossom ", index1, " is: ", speed_i)

        best_i = pbests[index1]
        #print("The current personal best (memory) for cromossom ", index1, " is: ", best_i)

        #list_global = Func_obj1(pbests)########################## Testar X_pop
        #print("The current global list is :", list_global)
        global_i = X_pop[X_func.index(min(X_func))]
        
        #print("The current global best in population is: ", global_i)

        
        for index2 in range(len(X_pop[0])):

            speed_0 = C0*speed_i[index2]*w
            #print("The first component of speed is: ", speed_0)
            
            rand_1 = np.random.uniform(0, 1)
            speed_1 = C1*rand_1 * (best_i[index2] - X_pop[index1][index2])
            
            #print("The first random is: ", rand_1)
            #print(best_i[index2])
            #print(X_pop[index1][index2])
            #print("The distance from the points is: ", (best_i[index2] - X_pop[index1][index2]))
            #print("The second component of speed is: ", speed_1)
            
            rand_2 = np.random.uniform(0, 1)
            speed_2 = C2*rand_2 * (global_i[index2] - X_pop[index1][index2])
            
            #print("The second random is: ", rand_2)
            #print(global_i[index2])
            #print(X_pop[index1][index2])
            #print("The third component of speed is: ", speed_2)
            
            speed_component = speed_0 + speed_1 + speed_2
############################################################################ Check max speed     
            if abs(speed_component) > V_max:
        
                if speed_component > 0:
                    speed_component = V_max                    
                else:
                    speed_component = -V_max
################################################################################ Check boundaries                    
            if speed_component + X_pop[index1][index2] > max_values[index2]:
                speed_component = -speed_component
            if speed_component + X_pop[index1][index2] < min_values[index2]: 
                speed_component = -speed_component


            moved = X_pop[index1][index2] + speed_component

            speed_vector.append(speed_component)
            

            if  moved >=  max_values[index2]:
                new_pos.append(max_values[index2])

            elif  moved <=  min_values[index2]:
                new_pos.append(min_values[index2])

            else:
                new_pos.append(moved)             

            
        #print("The new position for the ", index1, " cromossom is ", new_pos)
        #print("The new speed vector for the ", index1, " cromossom is ", speed_vector)
        
        
        reevaluate = Func_obj1([new_pos])[0]
        #print("The reevaluated value for cromossom ", index1, " is : ", reevaluate)

        if reevaluate <= X_func[index1]:
            #print("O indivíduo achou uma nova melhor posição: ", new_pos)
            new_bests.append(new_pos)
        
        elif reevaluate > X_func[index1]:
            #print("O personal best foi mantido!")
            new_bests.append(pbests[index1])
        
        
        #print("The new best value for cromossom ", index1, " is : ", new_bests[index1])

        X_pop[index1] = new_pos
        X_func[index1] = reevaluate
        new_speeds.append(speed_vector)


    return X_pop, X_func, new_speeds, new_bests

def PSO(initial_pop, generations, C0, C1, C2, V_max):
    
    best_par = []
    first_pop_x = []
    speeds = []
    
    success = 0

    for size in range(initial_pop):
        variables = []
        speed = []
        for index in range(len(min_values)):
            variables.append(random.uniform(min_values[index],max_values[index]))
            speed.append(random.uniform(-10,10))
        
        first_pop_x.append(variables)
        speeds.append(speed)
        
    current_pop = first_pop_x
    personal_bests = current_pop
        
    for gen_id in range(generations):
        
        #print("Start of generation number: ", gen_id+1)
                
        current_pop_y = Func_obj1(current_pop)
        
        #print("The current population is: ", current_pop)
        #print("The current speeds are: ", speeds)
        #print("The object function is: ", current_pop_y)
        
        if gen_id in best_ref:
            best_par.append(min(current_pop_y) - global_min)
        
        
        if min(current_pop_y) - global_min < 0.00000001:
            best_in = min(current_pop_y) - global_min
            worst_in = max(current_pop_y) - global_min
            mean_in = np.mean(current_pop_y) - global_min
            median_in = np.median(current_pop_y)
            
            num_runs = gen_id + 1
            success += 1
            
            while len(best_par) < len(best_ref):
                best_par.append(best_in)
               
            print("Success")
            print("End in Run nº: ", num_runs)
            print("Minimum result found in: ", current_pop[current_pop_y.index(min(current_pop_y))], " : ", best_in)
            return best_in, worst_in, mean_in, median_in, best_par, num_runs, success
            
            
            break
        
        #w_index0 = 0.9
        #w_index = 1.4*(1-(gen_id/generations))
        w_index2 = 0.9 - 0.7*(gen_id/generations) 
        
        X_pop, X_func, new_speeds, pbest = Movement(current_pop,
                                                    current_pop_y,
                                                    speeds,
                                                    personal_bests,
                                                    C0,
                                                    C1,
                                                    C2,
                                                    V_max,
                                                    w_index2)

        
        current_pop = X_pop
        speeds = new_speeds
        personal_bests = pbest
        
    
    best_in = min(current_pop_y) - global_min
    worst_in = max(current_pop_y) - global_min
    mean_in = np.mean(current_pop_y) - global_min
    median_in = np.median(current_pop_y)
    
    num_runs = gen_id + 1
    
    best_par.append(best_in)
    
    print("No success")
    print("Minimum result found in: ", current_pop[current_pop_y.index(min(current_pop_y))], " : ", best_in)
       
    return best_in, worst_in, mean_in, median_in, best_par, num_runs, success



min_values = [-100,-100,-100,-100,-100,-100,-100,-100,-100,-100]
max_values = [100 , 100, 100,100 , 100, 100, 100, 100,100 ,100]
global_min = -450.0



number_pop = int(input("Enter the size of the population (NP):  "))
number_gen = int(input("Enter the number of generations:  "))    
C0 = float(input("Enter the tax C0 VALUE: "))
C1 = float(input("Enter the tax C1 VALUE: "))
C2 = float(input("Enter the tax C2 VALUE: "))
V_max = float(input("Enter the maximum speed allowed: "))



best_ref = [0*number_gen,
            0.001*number_gen,
            0.01*number_gen,
            0.1*number_gen,
            0.2*number_gen,
            0.3*number_gen,
            0.4*number_gen,
            0.5*number_gen,
            0.6*number_gen,
            0.7*number_gen,
            0.8*number_gen,
            0.9*number_gen,
            1.0*number_gen]


def Output_Excel(number_runs):
	success_rate = 0

	# Workbook is created 
	wb = Workbook() 

	# add_sheet is used to create sheet. 
	sheet1 = wb.add_sheet('PSO')

	sheet1.write(1, 1, "RUN nº")
	sheet1.write(2,  1, "Closed in run")
	sheet1.write(3,  1, "Best result")
	sheet1.write(4,  1, "Worst result")
	sheet1.write(5,  1, "Mean result")
	sheet1.write(6,  1, "Median result")
	sheet1.write(7,  1, "Parcials")
	sheet1.write(8,  1, "Erro para FES=0,0*MaxFES")
	sheet1.write(9,  1, "Erro para FES=0,001*MaxFES")
	sheet1.write(10, 1, "Erro para FES=0,01*MaxFES")
	sheet1.write(11, 1, "Erro para FES=0,1*MaxFES")
	sheet1.write(12, 1, "Erro para FES=0,2*MaxFES")
	sheet1.write(13, 1, "Erro para FES=0,3*MaxFES")
	sheet1.write(14, 1, "Erro para FES=0,4*MaxFES")
	sheet1.write(15, 1, "Erro para FES=0,5*MaxFES")
	sheet1.write(16, 1, "Erro para FES=0,6*MaxFES")
	sheet1.write(17, 1, "Erro para FES=0,7*MaxFES")
	sheet1.write(18, 1, "Erro para FES=0,8*MaxFES")
	sheet1.write(19, 1, "Erro para FES=0,9*MaxFES")
	sheet1.write(20, 1, "Erro para FES=1,0*MaxFES")
	sheet1.write(21, 1, "Success rate")

	for run in range(number_runs):
	    print("Start of run ", run)
	    
	    BEST, WORST, MEAN, MEDIAN, BEST_PAR, NUM_RUNS, SUCCESS = PSO(number_pop, number_gen, C0, C1, C2, V_max)

	    
	    sheet1.write(1, run+2, (run+1))
	    sheet1.write(2, run+2, (NUM_RUNS))
	    sheet1.write(3, run+2, (BEST) - global_min)
	    sheet1.write(4, run+2, (WORST) - global_min)
	    sheet1.write(5, run+2, (MEAN) - global_min)
	    sheet1.write(6, run+2, (MEDIAN) - global_min)
	    
	    for index in range(len(BEST_PAR)):
	        
	        sheet1.write(8+index,  run+2, (BEST_PAR[index]))
	    
	    
	    success_rate += SUCCESS
	            

	sheet1.write(21, 2, (success_rate))

	wb.save('CEC2005 Function1 - PSO4.xls') 

	return success_rate/number_runs
           
Output_Excel(25)
