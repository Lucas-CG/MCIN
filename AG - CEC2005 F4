import numpy as np
from optproblems import cec2005
import random
import math
import xlwt
from xlwt import Workbook

function1 = cec2005.F1(10)

def Func_obj1(X):
    z = []
    for cromo in X:
        
        z.append(function1(cromo))
    
    return z
    
def Apt_ord(x_values,f_values):
    sorted_f = sorted(f_values)

    pop_sort_x = []

    for item in sorted_f:
        pop_sort_x.append(x_values[f_values.index(item)])
        
    apt_x = []
    apt_x_acum = []
    acum = 0

    for i in range(1,size_pop+1):
        value = 2*(size_pop-i)/(size_pop-1)
        apt_x.append(value)
        acum += value 
        apt_x_acum.append(acum)
        
    return pop_sort_x, sorted_f, apt_x  # Adicionar t_x_acum #


def Selection_torn(x_values, f_values):
    selected_torn = []

    for i in range(0,size_pop):
        itens = random.sample(range(0, size_pop), 3)
        
        max_apt = min(f_values[itens[0]],f_values[itens[1]],f_values[itens[2]])
        
        selected_torn.append(x_values[f_values.index(max_apt)])
    
    return selected_torn


def Cross_Michalewicz_Arit(inter_pop):
    crossed_generation = []
    
    
    while len(crossed_generation) < len(inter_pop):
        fathers = random.sample(range(0, len(inter_pop)), 2)

        cross_over_test = random.random()

        father_1 = inter_pop[fathers[0]]
        father_2 = inter_pop[fathers[1]]
        
        cross_over_test = random.random()

        if cross_over_test < crossover_tax:
            
            beta = np.random.uniform(0,1)
            
            son1 = []
            son2 = []
            
            for index in range(len(father_1)):    
                variable_1 = beta*father_1[index] + (1-beta)*father_2[index]
                variable_2 = (1-beta)*father_1[index] + beta*father_2[index]

                if variable_1 > max_values[index]:
                	son1.append(max_values[index])

                if variable_1 < min_values[index]:
                	son1.append(min_value[index])

               	if min_values[index] <= variable_1 <= max_values[index]:
                	son1.append(variable_1)
                

                if variable_2 > max_values[index]:
                	son2.append(max_values[index])

                if variable_2 < min_values[index]:
                	son2.append(min_value[index])

                if min_values[index] <= variable_2 <= max_values[index]:
                	son2.append(variable_2)

            
            if Func_obj1([son1])[0] <= Func_obj1([son2])[0]:
            	crossed_generation.append(son1)

            else:
            	crossed_generation.append(son2)       
        
        else:
        	if Func_obj1([father_1])[0] <= Func_obj1([father_2])[0]:
        		crossed_generation.append(father_1)
        	else:
        		crossed_generation.append(father_2)


    return crossed_generation


def Muta_Michalewicz_gauss(crossed_generation, muta_tax):
    muta_generation = []
    next_generation_f = []
    
    for cromossom in crossed_generation:
        mut_variable = []
        
        for variable in cromossom:
            muta_test = random.random()

            if muta_test < muta_tax:

                sigma = 1

                mut_pos = np.random.normal(variable,sigma)

                if mut_pos > 100:
                	mut_variable.append(100)

                elif mut_pos < -100:
                	mut_variable.append(-100)

                else:
                	mut_variable.append(mut_pos)   

            else:
                mut_variable.append(variable)
        
        muta_generation.append(mut_variable)
    
    return muta_generation


def Genetic_Alg(initial_pop, generations, cross_tax, mut_tax, elitism):
    success = 0
    best_par = []
    
    first_pop_x = []

    for size in range(size_pop):
        variables = []
        for index in range(len(min_values)):
            variables.append(random.uniform(min_values[index],max_values[index]))
        
        first_pop_x.append(variables)
    
    current_pop = first_pop_x
    
    for gen_id in range(generations):
                
        current_pop_y = Func_obj1(current_pop)
        
        if gen_id in best_ref:
            best_par.append(min(current_pop_y) - global_min)
        

        sorted_x, sorted_y, apt_x = Apt_ord(current_pop, current_pop_y)
        
        selected = Selection_torn(current_pop, current_pop_y)
                                       
        crossed_pop = Cross_Michalewicz_Arit(selected)
        
        muta_pop = Muta_Michalewicz_gauss(crossed_pop, mut_tax)
        
        muta_pop_y = Func_obj1(muta_pop)
        
        sorted_mut, sorted_mut_f, apt_mut = Apt_ord(muta_pop, muta_pop_y)
        

        if min(muta_pop_y) - global_min < 0.00000001:            
            best_in = min(muta_pop_y) - global_min
            worst_in = max(muta_pop_y) - global_min
            mean_in = np.mean(muta_pop_y) - global_min
            median_in = np.median(muta_pop_y)
            
            num_runs = gen_id + 1
            success += 1
            
            while len(best_par) < len(best_ref):
                best_par.append(best_in)
            
            print("Success")
            print("End in Run nº: ", num_runs)
            print("Minimum result found in: ", muta_pop[muta_pop_y.index(min(muta_pop_y))], " : ", best_in)
            
            return best_in, worst_in, mean_in, median_in, best_par, num_runs, success #maximum_apt, average_apt, minimum_apt,
            
            break        

        current_pop = sorted_x[0:elitism] + sorted_mut[0:initial_pop-elitism]
        
       
    best_in = min(muta_pop_y) - global_min
    worst_in = max(muta_pop_y) - global_min
    mean_in = np.mean(muta_pop_y) - global_min
    median_in = np.median(muta_pop_y)


    num_runs = gen_id + 1
    success = 0
    

    best_par.append(best_in)
    

    print("No success")
    print("End in Run nº: ", num_runs)
    print("Minimum result found in: ", muta_pop[muta_pop_y.index(min(muta_pop_y))], " : ", best_in)
    
    return best_in, worst_in, mean_in, median_in, best_par, num_runs, success #maximum_apt, average_apt, minimum_apt, 



min_values = [-100,-100,-100,-100,-100,-100,-100,-100,-100,-100]
max_values = [100 , 100, 100,100 , 100, 100, 100, 100,100 ,100]
global_min = -450.0


size_pop = int(input("Enter the size of the population:  "))
number_gen = int(input("Enter the number of generations:  "))    
crossover_tax = float(input("Enter the tax for crossover (60%-90%): "))/100
mutation_tax = float(input("Enter the tax for mutation: (0.5%-1%): "))/100
number_elit = int(input("Enter the number of elit parents in each generation: "))


best_ref = [0*number_gen,
            0.001*number_gen,
            0.01*number_gen,
            0.1*number_gen,
            0.2*number_gen,
            0.3*number_gen,
            0.4*number_gen,
            0.5*number_gen,
            0.6*number_gen,
            0.7*number_gen,
            0.8*number_gen,
            0.9*number_gen,
            1.0*number_gen]


def Output_Excel(number_runs):
	success_rate = 0

	# Workbook is created 
	wb = Workbook() 

	# add_sheet is used to create sheet. 
	sheet1 = wb.add_sheet('AG_MWZ')

	sheet1.write(1, 1, "RUN nº")
	sheet1.write(2,  1, "Closed in run")
	sheet1.write(3,  1, "Best result")
	sheet1.write(4,  1, "Worst result")
	sheet1.write(5,  1, "Mean result")
	sheet1.write(6,  1, "Median result")
	sheet1.write(7,  1, "Parcials")
	sheet1.write(8,  1, "Erro para FES=0,0*MaxFES")
	sheet1.write(9,  1, "Erro para FES=0,001*MaxFES")
	sheet1.write(10, 1, "Erro para FES=0,01*MaxFES")
	sheet1.write(11, 1, "Erro para FES=0,1*MaxFES")
	sheet1.write(12, 1, "Erro para FES=0,2*MaxFES")
	sheet1.write(13, 1, "Erro para FES=0,3*MaxFES")
	sheet1.write(14, 1, "Erro para FES=0,4*MaxFES")
	sheet1.write(15, 1, "Erro para FES=0,5*MaxFES")
	sheet1.write(16, 1, "Erro para FES=0,6*MaxFES")
	sheet1.write(17, 1, "Erro para FES=0,7*MaxFES")
	sheet1.write(18, 1, "Erro para FES=0,8*MaxFES")
	sheet1.write(19, 1, "Erro para FES=0,9*MaxFES")
	sheet1.write(20, 1, "Erro para FES=1,0*MaxFES")
	sheet1.write(21, 1, "Success rate")

	for run in range(number_runs):
	    print("Start of run ", run)
	    
	    BEST, WORST, MEAN, MEDIAN, BEST_PAR, NUM_RUNS, SUCCESS = Genetic_Alg(size_pop,
                                                                            number_gen,
                                                                            crossover_tax,
                                                                            mutation_tax,
                                                                            number_elit)
	    
	    sheet1.write(1, run+2, (run+1))
	    sheet1.write(2, run+2, (NUM_RUNS))
	    sheet1.write(3, run+2, (BEST))
	    sheet1.write(4, run+2, (WORST))
	    sheet1.write(5, run+2, (MEAN))
	    sheet1.write(6, run+2, (MEDIAN))
	    
	    for index in range(len(BEST_PAR)):
	        
	        sheet1.write(8+index,  run+2, (BEST_PAR[index]))
	    
	    
	    success_rate += SUCCESS
	            

	sheet1.write(21, 2, (success_rate))

	wb.save('CEC2005 Function1 - AG_T.xls') 

	return success_rate/number_runs
           
Output_Excel(5)
