import numpy as np
from optproblems import cec2005
import random
import math
import xlwt
from xlwt import Workbook

global size_pop, MFES
global POP, POP_F
global min_values, max_values
global best_par
global gen_id
global num_iter


min_values = [-100,-100,-100,-100,-100,-100,-100,-100,-100,-100]
max_values = [100 , 100, 100,100 , 100, 100, 100, 100,100 ,100]
global_min = -450.0


size_pop = int(input("Enter the size of the population (NP):  "))
MFES = int(input("Enter the maximum number of executions:  "))    
C0 = float(input("Enter the tax C0 VALUE: "))
C1 = float(input("Enter the tax C1 VALUE: "))
C2 = float(input("Enter the tax C2 VALUE: "))
V_max = float(input("Enter the maximum speed allowed: "))
#global_min = float(input("Enter the global minimmum: "))

best_ref = [0*MFES,
            0.001*MFES,
            0.01*MFES,
            0.1*MFES,
            0.2*MFES,
            0.3*MFES,
            0.4*MFES,
            0.5*MFES,
            0.6*MFES,
            0.7*MFES,
            0.8*MFES,
            0.9*MFES,
            1.0*MFES]

function1 = cec2005.F3(10)

def Initial_Pop():
	initial_pop = []
	for index1 in range(size_pop):
		variables = []

		for index2 in range(len(min_values)):
			variables.append(random.uniform(min_values[index2],max_values[index2]))
		
		initial_pop.append(variables)

	return initial_pop


def Initial_Speeds():
	initial_speeds = []
	for index1 in range(size_pop):
		speed_index = []

		for index2 in range(len(min_values)):
			speed_index.append(random.uniform(-40,40))
		
		initial_speeds.append(speed_index)

	return initial_speeds


def Fitness(X, num_iter):
	fit_list = []
	for particle in X:
		evaluation = function1(particle)
		fit_list.append(evaluation)

		#Parcials(best_par, num_iter)

		num_iter += 1
		#print("Total of iterations: ", num_iter)

		if num_iter > MFES:
			print("Exceeded the limit of FES!!!")
			success = 0			
			return
			break

	return fit_list, num_iter


def Movement(POP, POP_F, speeds, pbests, C0, C1, C2, V_max, w, X_r, num_iter):
    new_speeds = []
    new_bests = []

    for index1 in range(len(POP)):
        speed_vector = []
        new_pos = []
        speed_i = speeds[index1]
        best_i = pbests[index1]
        global_i = POP[POP_F.index(min(POP_F))]
        
        for index2 in range(len(POP[0])):
            speed_0 = C0*speed_i[index2]*w           
            rand_1 = np.random.uniform(0, 1)
            speed_1 = C1*rand_1 * (best_i[index2] - POP[index1][index2])           
            rand_2 = np.random.uniform(0, 1)
            speed_2 = C2*rand_2 * (global_i[index2] - POP[index1][index2])            
            speed_component = (speed_0 + speed_1 + speed_2)*X_r
############################################################################ Check max speed     
            if abs(speed_component) > V_max:        
                if speed_component > 0:
                    speed_component = V_max                    
                else:
                    speed_component = -V_max
################################################################################ Check boundaries                    
            if speed_component + POP[index1][index2] >= max_values[index2]:               
                new_pos.append(max_values[index2])
                speed_component = - speed_component
            elif speed_component + POP[index1][index2] <= min_values[index2]:
                new_pos.append(min_values[index2])
                speed_component = - speed_component
            else:
                new_pos.append(POP[index1][index2] + speed_component)
            speed_vector.append(speed_component)


        evaluation, num_iter = Fitness([new_pos], num_iter)

        if evaluation[0] <= POP_F[index1]:
            #print("O indivíduo achou uma nova melhor posição: ", new_pos)
            new_bests.append(new_pos)
        
        elif evaluation[0] > POP_F[index1]:
            new_bests.append(pbests[index1])
        
        POP[index1] = new_pos
        POP_F[index1] = evaluation[0]
        new_speeds.append(speed_vector)

    return POP, POP_F, new_speeds, new_bests, num_iter

def PSO(initial_pop, MFES, C0, C1, C2, V_max, X_r):
	POP = Initial_Pop()
	#print("Initial pop: ", POP)
	pbests = POP

	speeds = Initial_Speeds()
	#print("Initial speeds: ", speeds)

	num_iter = 0
	gen_id = 0
	success = 0

	best_par = []

	current_parcial = 0

	while num_iter < MFES:
		
		POP_F, num_iter = Fitness(POP, num_iter)
		#print("Current interation :", num_iter)

		if num_iter >= best_ref[current_parcial]:
			best_par.append(min(POP_F) - global_min)
			current_parcial += 1
			print("Parcial comupted")

		if min(POP_F) - global_min < 0.00000001:
			best_in = min(POP_F) - global_min
			worst_in = max(POP_F) - global_min
			mean_in = np.mean(POP_F) - global_min
			median_in = np.median(POP_F)

			success = 1

			while len(best_par) < len(best_ref):
				best_par.append(best_in)

			print("Success")
			print("End in generation :", gen_id)
			print("End in Run nº: ", num_iter)
			print("Minimum result found in: ", POP[POP_F.index(min(POP_F))], " : ", best_in)
			return best_in, worst_in, mean_in, median_in, best_par, num_iter, success #maximum_apt, average_apt, minimum_apt,
			break

		#w_index0 = 0.9
		w_index1 = 0.4 + 0.5*((MFES - num_iter)/MFES)

		POP, POP_F, new_speeds, new_pbests, num_iter = Movement(POP,
											  POP_F,
											  speeds,
											  pbests,
											  C0,
											  C1,
											  C2,
											  V_max,
											  w_index1,
											  X_r,
											  num_iter)

		POP = POP
		speeds = new_speeds
		pbests = new_pbests
		gen_id += 1


	best_in = min(POP_F) - global_min
	worst_in = max(POP_F) - global_min
	mean_in = np.mean(POP_F) - global_min
	median_in = np.median(POP_F)

	success = 0

	while len(best_par) < len(best_ref):
		best_par.append(best_in)

	print("No Success")
	print("End in generation :", gen_id)
	print("End in Run nº: ", num_iter)
	print("Minimum result found in: ", POP[POP_F.index(min(POP_F))], " : ", best_in)
	return best_in, worst_in, mean_in, median_in, best_par, num_iter, success #maximum_apt, average_apt, minimum_apt,


def Output_Excel(number_runs):
	success_rate = 0

	# Workbook is created 
	wb = Workbook() 

	# add_sheet is used to create sheet. 
	sheet1 = wb.add_sheet('PSO_4')

	sheet1.write(1, 1, "RUN nº")
	sheet1.write(2,  1, "Closed in run")
	sheet1.write(3,  1, "Best result")
	sheet1.write(4,  1, "Worst result")
	sheet1.write(5,  1, "Mean result")
	sheet1.write(6,  1, "Median result")
	sheet1.write(7,  1, "Parcials")
	sheet1.write(8,  1, "Erro para FES=0,0*MaxFES")
	sheet1.write(9,  1, "Erro para FES=0,001*MaxFES")
	sheet1.write(10, 1, "Erro para FES=0,01*MaxFES")
	sheet1.write(11, 1, "Erro para FES=0,1*MaxFES")
	sheet1.write(12, 1, "Erro para FES=0,2*MaxFES")
	sheet1.write(13, 1, "Erro para FES=0,3*MaxFES")
	sheet1.write(14, 1, "Erro para FES=0,4*MaxFES")
	sheet1.write(15, 1, "Erro para FES=0,5*MaxFES")
	sheet1.write(16, 1, "Erro para FES=0,6*MaxFES")
	sheet1.write(17, 1, "Erro para FES=0,7*MaxFES")
	sheet1.write(18, 1, "Erro para FES=0,8*MaxFES")
	sheet1.write(19, 1, "Erro para FES=0,9*MaxFES")
	sheet1.write(20, 1, "Erro para FES=1,0*MaxFES")
	sheet1.write(21, 1, "Success rate")


	for run in range(number_runs):
	    print("Start of run ", run)
	    
	    BEST, WORST, MEAN, MEDIAN, BEST_PAR, NUM_RUNS, SUCCESS = PSO(size_pop, MFES, C0, C1, C2, V_max, 0.73)
	    
	    sheet1.write(1, run+2, (run+1))
	    sheet1.write(2, run+2, (NUM_RUNS))
	    sheet1.write(3, run+2, (BEST))
	    sheet1.write(4, run+2, (WORST))
	    sheet1.write(5, run+2, (MEAN))
	    sheet1.write(6, run+2, (MEDIAN))
	    
	    for index in range(len(BEST_PAR)):
	        
	        sheet1.write(8+index,  run+2, (BEST_PAR[index]))
	    
	    
	    success_rate += SUCCESS
	            

	sheet1.write(21, 2, (success_rate))

	wb.save('CEC2005 Function3 - PSO_4.xls') 

	return success_rate/number_runs
   
Output_Excel(5)
